{
  "HEADER": {
    "GETTING_STARTED": "Getting started",
    "TEST_CASES": "Casos de prueba",
    "FAQ": "P+F",
    "CONTACT": "Contactos"
  },
  "FOOTER": {
    "GETTING_STARTED": "Getting started",
    "TEST_CASES": "Test cases",
    "FAQ": "FAQs",
    "CONTACT": "Contact"
  },
  "HOME": {
    "HEADER": {
      "TITLE_1": "Portal de desarrolladores",
      "TITLE_2": "por adorsys",
      "SUBTITLE_1": "Creando nuevos, digitales",
      "SUBTITLE_2": "servicios a través de Open",
      "SUBTITLE_3": "Banking"
    },
    "WHAT_IS": {
      "TITLE": "¿Qué es XS2A Sandbox?",
      "CONTENT": {
        "THE": "El",
        "XS2A": "XS2ASandbox",
        "PART_1": "es un entorno dinámico de sandbox que cumple completamente con los requisitos de PSD2 para proporcionar API para terceros proveedores (TPP). Basado en la especificación NextGen PSD2 de Berlin Group para el acceso a las cuentas (XS2A),",
        "PART_2": "cumple todos los requisitos reglamentarios y cumple con NISP. Este portal de desarrolladores se crea para ayudar a los desarrolladores de TPP a comenzar a trabajar con XS2A Sandbox."
      }
    },
    "HOW_TO": {
      "TITLE": "Cómo usar el XS2A Sandbox",
      "STEP_1": {
        "TITLE": "Paso 1",
        "CONTENT": "Leer el manual de «Cómo empezar»."
      },
      "STEP_2": {
        "TITLE": "Paso 2",
        "CONTENT": "Descargar, instalar y ejecutar XS2A Sandbox"
      },
      "STEP_3": {
        "TITLE": "Paso 3",
        "CONTENT": "¡Lea «Prueba de flujos» y comience a probar!"
      }
    },
    "PSD2": {
      "TITLE": "PSD2 y Open Banking",
      "THE": "La",
      "LINK": "Directiva de Servicios de Pago 2 (PSD2)",
      "CONTENT": "instruye a los bancos (Proveedores de Servicios de Pago de Servicio de Cuentas o ASPSP) para que proporcionen una interfaz de Acceso a la Cuenta (XS2A) completamente productiva a Terceros Proveedores (TPP) hasta septiembre de 2019. El propio XS2A consiste en servicios bancarios para iniciar pagos (PIS), solicitar datos de cuenta (AIS) y obtener la confirmación de la disponibilidad de fondos (PIIS). Para garantizar el cumplimiento de este plazo debido a las adaptaciones y los errores, PSD2 reclama a los bancos que proporcionen un Sandbox dinámica y funcional que ofrece los servicios XS2A en un entorno no productivo hasta junio de 2019."
    },
    "FEATURES": {
      "TITLE": "XS2ASandbox Features",
      "CONTENT": "XS2ASandbox is a dynamic sandbox environment: you can create users, payments\n    and consents, play with data for testing purposes. With dynamic sandbox TPP\n    UI you can access banking API directly, get TPP certificate and manage\n    testing accounts. The developer portal contains testing instructions and all\n    needed test-cases. All XS2ASandbox services can be installed and run in one\n    simple command. Two main SCA approaches are supported: REDIRECT and\n    EMBEDDED. For redirect approach online banking demo UI was created.",
      "SLIDES": {
        "SLIDE_1": {
          "TITLE": "Plug and Play",
          "CONTENT": "Ready to use solution, which can be easily installed"
        },
        "SLIDE_2": {
          "TITLE": "Detailed Documentation",
          "CONTENT": "Well described documentation on a developer portal"
        },
        "SLIDE_3": {
          "TITLE": "Reliable test options",
          "CONTENT": "TPP-Test certificate generation tool and NISP Tests"
        },
        "SLIDE_4": {
          "TITLE": "Customizable User Interface",
          "CONTENT": "TPP-UI for users and account management on the bank side"
        },
        "SLIDE_5": {
          "TITLE": "Customer focused",
          "CONTENT": "Client-oriented approach, flexible solution for customer needs and customer support"
        },
        "SLIDE_6": {
          "TITLE": "Realistic Simulation",
          "CONTENT": "Real bank system emulations with embedded XS2A API"
        },
        "SLIDE_7": {
          "TITLE": "Wide range of services",
          "CONTENT": "Accounting Service, Security Service and Payment Service"
        },
        "SLIDE_8": {
          "TITLE": "Open source",
          "CONTENT": "Open source project, available on GitHub and constantly updated"
        }
      }
    },
    "HISTORY": {
      "TITLE": "Product History",
      "PRODUCT": {
        "POINT_1": {
          "TITLE": "Project Kick-Off with two Team Members",
          "CONTENT": ""
        },
        "POINT_2": {
          "TITLE": "PreDemo of MVP 1.0",
          "CONTENT": "Embedded approach: PIS, AIS, PIIS"
        },
        "POINT_3": {
          "TITLE": "DEMO of MVP 1.0",
          "CONTENT": "Embedded and redirected approaches"
        },
        "POINT_4": {
          "TITLE": "Release of XS2ASandbox ver 1.0",
          "CONTENT": "Support of Redirect and Embedded approach: TPP-UI, Online Banking"
        },
        "POINT_5": {
          "TITLE": "Release ver 1.1",
          "CONTENT": "Multilevel SCA, Multicurrency accounts"
        }
      }
    },
    "QUESTIONS": {
      "TITLE": "Any Questions?",
      "ASK": "Ask this person."
    }
  },
  "GETTING_STARTED": {
    "INTRODUCTION": {
      "TITLE": "Empezando",
      "CONTENT": {
        "THE_1": "La",
        "LINK": "Directiva de Servicios de Pago 2 (PSD2)",
        "PART_1": "instruye a los bancos (Proveedores de Servicios de Pago de Servicio de Cuentas o ASPSP) para que proporcionen una interfaz de Acceso a la Cuenta (XS2A) completamente productiva a Terceros Proveedores (TPP) hasta septiembre de 2019. El propio XS2A consiste en servicios bancarios para iniciar pagos (PIS), solicitar datos de cuenta (AIS) y obtener la confirmación de la disponibilidad de fondos (PIIS). Para garantizar el cumplimiento de este plazo debido a las adaptaciones y los errores, PSD2 reclama a los bancos que proporcionen un Sandbox dinámica y funcional que ofrece los servicios XS2A en un entorno no productivo hasta junio de 2019.",
        "THE_2": "El",
        "XS2A": "XS2ASandbox",
        "PART_2": "es un entorno de entorno de pruebas dinámico que cumple completamente los requisitos de PSD2 para proporcionar API a Terceros Proveedores(TPP). Basado en la especificación NextGen PSD2 del Grupo de Berlín para el acceso a cuentas (XS2A),",
        "PART_3": "Este portal de desarrolladores se crea para ayudar a los desarrolladores de TPP a comenzar a trabajar con XS2ASandbox."
      }
    },
    "ARCHITECTURE": {
      "TITLE": "Arquitectura y módulos de XS2ASandbox",
      "CONTENT": "Los componentes de XS2ASandbox con sus conexiones entre sí se muestran en la Figura 1.1.",
      "CAPTION": "Figura 1.1: Componentes de la XS2ASandbox"
    },
    "INTERFACE": {
      "TITLE": "Interfaz XS2A",
      "CONTENT": {
        "PART_1": "El componente central de",
        "XS2A": "XS2ASandbox",
        "PART_2": "es la interfaz XS2A que cumple con los requisitos del Grupo de Berlín",
        "PART_3": "(versión 1.3) y se basa en datos de prueba. Puede visitar nuestra interfaz de usuario",
        "PART_4": "o encontrar la interfaz completa de ",
        "LINK": "OpenSource XS2A en Github."
      }
    },
    "PROFILE": {
      "TITLE": "Perfil ASPSP",
      "CONTENT": {
        "PART_1": "Además de la interfaz real, PSD2 instruye a los ASPSP para que ofrezcan una documentación técnica gratuita que contenga, entre otros, información sobre productos de pago admitidos y servicios de pago. Esta información se almacena en",
        "ASPSP": "ASPSP-profile",
        "PART_2": " (perfil de banco), un servicio basado en el archivo yaml donde un banco puede proporcionar productos de pago, servicios de pago, enfoques SCA compatibles y otras configuraciones específicas del banco."
      },
      "SUBTITLE_1": "Configuración activa de XS2A (perfil del banco)",
      "LIST": {
        "LI_1": "Enfoque SCA soportado: Redirect y Embeded",
        "LI_2": "Tipos de pago disponibles y productos de pago para cada tipo:",
        "UL_1": {
          "LI_1": "Soltero (sepa-credit-transfers)",
          "LI_2": "Fechado en el futuro (sepa-credit-transfers)",
          "LI_3": "Masivo (sepa-credit-transfers)",
          "LI_4": "Periódico (sepa-credit-transfers)"
        },
        "LI_3": "Confirmación de Fondos: apoyado",
        "LI_4": "Redireccionar URLs a la Banca en Línea",
        "UL_2": {
          "LI_1": "Redirect URL for Payment confirmation: **\n http://localhost:4400/payment-initiation/login?paymentId=encrypted-payment-id&redirectId=redirect-id\n **",
          "LI_2": "Redirect URL for Payment cancellation: **\n http://localhost:4400/payment-cancellation/login?paymentId=encrypted-payment-id&redirectId=redirect-id\n **",
          "LI_3": "Redirect URL for Account Consent confirmation: **\n http://localhost:4400/account-information/login?encryptedConsentId=encrypted-consent-id&redirectId=redirect-id\n **"
        },
        "LI_5": "Tipos de Consentimientos soportados:",
        "UL_3": {
          "LI_1": "Dedicado: si",
          "LI_2": "Ofrecido por el Banco: si",
          "LI_3": "Global: si",
          "LI_4": "Cuentas disponibles: si"
        },
        "DISABLED": "Características actualmente deshabilitadas:",
        "LI_6": "Cesta de firma",
        "LI_7": "Informes delta"
      },
      "SUBTITLE_2": "Configuración de perfil ASPSP correspondiente en el archivo .yaml:"
    },
    "CERTIFICATE": {
      "TITLE": "Servicio de Certificación TPP",
      "CONTENT": {
        "PART_1": "Generalmente, antes de acceder a los servicios XS2A, un TPP tendría que registrarse en su Autoridad Nacional Competente (NCA) y solicitar un certificado",
        "PART_2": "en un Proveedor de Servicios de Fideicomiso (TSP) apropiado. Sería demasiado esfuerzo emitir un certificado real solo para fines de prueba, por lo que",
        "XS2A": "XS2ASandbox",
        "PART_3": "simula además un TSP ficticio que emite Certificados de autenticación de sitios web calificados (QWAC). Un QWAC es parte de eIDAS y podría ser mejor conocido como certificado",
        "PART_4": "Para propósitos de PSD2, el certificado se extiende por QcStatement que contiene los valores apropiados, como los roles del PSP (consulte",
        "PART_5": "Después de incrustar el QWAC en la solicitud XS2A real, el rol y la firma se validan en un proxy central inverso antes de pasar finalmente a la interfaz donde tiene lugar la lógica bancaria."
      }
    },
    "UI": {
      "TITLE": "Interfaz de usuario TPP",
      "CONTENT": "Los desarrolladores de TPP pueden registrarse en el sistema, obtener certificados y descargar datos de prueba para su aplicación TPP utilizando el certificado generado y los datos preparados en la interfaz de usuario de TPP."
    },
    "OBA": {
      "TITLE": "Online Banking",
      "CONTENT": "En el caso de un enfoque de REDIRECT SCA, un usuario desea dar su consentimiento para utilizar la información de su cuenta o para confirmar / cancelar el pago. La banca en línea es una interfaz de usuario para proporcionar consentimiento a un banco. Los enlaces para la confirmación de consentimiento y la confirmación o cancelación de pago se proporcionan en la respuesta de los puntos finales correspondientes."
    },
    "LINKS_TO": {
      "TITLE": "Enlaces a entornos",
      "TABLE": {
        "R1_C1": "Service",
        "R1_C2": "Local environment",
        "R1_C3": "XS2ASandbox Demo environment",
        "R2": "Developer portal",
        "R3": "XS2A Interface Swagger",
        "R4": "Consent management system",
        "R5": "Ledgers",
        "R6": "ASPSP-Profile Swagger",
        "R7": "TPP User Interface",
        "R8": "Online banking UI",
        "R9": "Online banking backend",
        "R10": "Certificate Generator"
      }
    },
    "HOW_TO_DOWN": {
      "TITLE": "Cómo descargar, configurar y ejecutar el proyecto",
      "SUBTITLE_1": "Prerrequisitos",
      "CONTENT": {
        "PART_1": "Este sandbox se ejecuta con el docker-compose que se puede encontrar en docker-compose.yml y Makefile en el directorio del proyecto. Pero antes de ejecutar XS2ASandbox, primero verifique si todas las dependencias de compilación están instaladas:",
        "PART_2": "Si falta algo, instálelo en su máquina local, de lo contrario la compilación fallará. Lista de dependencias que se requieren para usar XS2ASandbox: Java 8, NodeJs, CLI angular, Asciidoctor, jq, Docker, Docker Compose, Maven, PlantUML. Aquí están los enlaces donde puede instalar las dependencias necesarias:",
        "TH_1": "Dependency",
        "TH_2": "Link",
        "PART_3": "Dejar de correr contenedores en terminal con combinación de teclas Control + C.",
        "PART_4": "Puede eliminar todos los contenedores de Sandbox de Docker con el siguiente comando:"
      },
      "SUBTITLE_2": "Nota 1",
      "TEXT_1": "Utilice la versión Node.js inferior a 12 (por ejemplo, 10.x.x o 11.x.x). De lo contrario, las aplicaciones angular no se construirían debido a conflictos de versión.",
      "SUBTITLE_3": "Nota 2",
      "TEXT_2": "Verifique la cantidad de memoria asignada a Docker (Abra Docker Desktop -> Preferencias -> Avanzado -> Memoria). Para un inicio rápido e indoloro de todos los servicios, no debe ser inferior a 5 GB",
      "SUBSECTION_1": {
        "TITLE": "Descargar XS2ASandbox",
        "PART_1": "Descargue el proyecto directamente",
        "LINK": "desde GitHub",
        "PART_2": "o use el comando:"
      },
      "SUBSECTION_2": {
        "TITLE": "Construye y ejecuta XS2ASandbox",
        "PART_1": "Después de descargar el proyecto vaya al directorio del proyecto:",
        "PART_2": "Construye todos los servicios con el comando:",
        "PART_3": "Después de crear los servicios, puede ejecutar XS2ASandbox de dos maneras, con un simple comando acoplable:",
        "PART_4": "O con los comandos de Makefile:",
        "PART_5": "1. Construir y ejecutar servicios",
        "PART_6": "2. Ejecutar servicios sin construir"
      }
    },
    "TROUBLES": {
      "TITLE": "Solución de problemas",
      "PART_1": "Estos son errores comunes que puede obtener durante el inicio de XS2ASandbox y una instrucción sobre cómo deshacerse de él:",
      "SUBTITLE_1": "Error de lista de cambios de liquibase",
      "PART_2": "Este error puede producirse si tuvo un inicio incorrecto de XS2ASandbox anteriormente. Ejemplo de posible stack trace:",
      "PART_3": "Solución posible:",
      "PART_4": "Busque y elimine todas las carpetas \"ledgerdbs\" y \"xs2adbs\". Borrar todos los contenedores docker con el comando:",
      "PART_5": "Reinicie todos los servicios.",
      "SUBTITLE_2": "Error de versión del nodo",
      "PART_6": "Este error se puede producir debido a una versión incorrecta de NodeJs (versión superior a 11.x). Ejemplo de posible  stack trace:",
      "PART_7": "Solución posible:",
      "PART_8": "Primero, verifique su versión de NodeJs con el comando:",
      "PART_9": "Si la versión es superior a 11.x, cambie la versión de NodeJs a una anterior."
    },
    "HOW_TO_REG": {
      "TITLE": "Cómo registrar TPP y comenzar testing",
      "LIST": {
        "LI_1": "Abra la página de inicio de sesión",
        "LINK": "de la interfaz de usuario de TPP",
        "LI_2": "Si Usted no tiene nombre de usuario y contraseña, regístrese Usted mismo haciendo clic en el botón \"Registrarse\".",
        "LI_3": "Regístrese, cree un certificado e inicie sesión en el sistema. Nota: la identificación de TPP debe constar de al menos 8 dígitos, no se permiten letras ni otros signos.",
        "LI_4": "Sube los datos de prueba y comienza a probar.",
        "TEXT_1": "El flujo completo para que los TPP comiencen su trabajo con XS2ASandbox se muestra en la Figura 1.2:",
        "TEXT_2": "Figura 1.2: flujo de TPP paso a paso"
      }
    },
    "HOW_TO_CST": {
      "TITLE": "How to customize UI of developer portal",
      "TOP_LIST": {
        "LI_1": "Create .json file with name UITheme.",
        "LI_2": "Json example",
        "LI_3": "Json fields.",
        "LIST_1": {
          "LI_1": "globalSettings - required",
          "INNER_LIST_1": {
            "LI_1": "logo - required, value: string, http url or file name with\n extension or ' '",
            "LI_2": "fontFamily - optional, value: string, font-name or font-name,\n font-family",
            "LI_3": "headerBG - optional, value: string, hex",
            "LI_4": "headerFontColor - optional, value: string, hex",
            "LI_5": "footerBG - optional, value: string, hex",
            "LI_6": "footerFontColor - optional, value: string, hex",
            "LI_7": "facebook - optional, value: string, http url",
            "LI_8": "linkedIn - optional, value: string, http url"
          },
          "LI_2": "contactInfo - required",
          "INNER_LIST_2": {
            "LI_1": "name - required, value: string",
            "LI_2": "position - required, value: string",
            "LI_3": "img - required, value: string, http url or file name with\n extension",
            "LI_4": "email - optional, value: string",
            "LI_5": "phone - optional, value: string"
          },
          "LI_3": "officesInfo - required. Array of 2 elements.",
          "INNER_LIST_3": {
            "LI_1": "city - required, value: string",
            "LI_2": "company - required, value: string",
            "LI_3": "addressFirstLine - required, value: string",
            "LI_4": "addressSecondLine - required, value: string",
            "LI_5": "phone - optional, value: string",
            "LI_6": "email - optional, value: string",
            "LI_7": "facebook - optional, value: string, http url",
            "LI_8": "linkedIn - optional, value: string, http url"
          }
        },
        "LI_4": "When you create .json (e.g. UITheme.json) file and fill all required\n fields, put this file with logo (e.g. logo.png) and contact person (e.g.\n contact.png) images in folder",
        "LI_5": "Steps for putting files in this folder:",
        "LIST_2": {
          "LI_1": "Navigate to local source folder (where the customisation files are\n stored):",
          "LI_2": "Login to Openshift:",
          "LI_3": "Navigate to the Openshift project.",
          "LI_4": "We select the development environment for our example.",
          "LI_5": "Please choose one of the following:",
          "LI_6": "Copy the customisation files to the running Developer Portal UI\n application pod:"
        },
        "LI_6": "Customization completed, congratulations!"
      }
    },
    "WHAT_NEXT": {
      "TITLE": "¿Que sigue?",
      "PART_1": "Cuando haya terminado con todos los pasos",
      "LINK_1": "del Manual de introducción",
      "PART_2": "consulte la sección",
      "LINK_2": "Casos de prueba",
      "PART_3": "para realizar más pruebas. Allí encontrará las pruebas preparadas ",
      "POSTMAN": "de Postman",
      "PART_4": ", la descripción de la interfaz de la interfaz XS2A y las instrucciones para probar XS2ASandbox con"
    }
  },
  "TEST_CASES": {
    "TITLE": "Test cases",
    "TEXT_1": "After loading test data into the system, TPP developer can test\n XS2ASandbox endpoints with Swagger or Postman tests. In Swagger section\n you can find information about usage of Swagger, prepared test data\n (Jsons) for testing and short API documentation.",
    "LINK": "In Postman tests section",
    "TEXT_2": " you\n can find information about usage of Postman for testing and download\n prepared Postman tests with testing data.",
    "TEXT_3": "Both sections provide tests for REDIRECT Strong Customer Authorisation\n (SCA) approach and EMBEDDED SCA Approach for Payment Initiation Service\n (PIS), Account Information Service (AIS) and Payment Instrument Issuer\n Service (PIIS).",
    "INTRODUCTION": {
      "TITLE": "INTRODUCTION",
      "REDIRECT": "Redirect approach",
      "EMBEDDED": "Embedded approach",
      "TESTING": "Testing flows",
      "MENU": {
        "LI_1": "Swagger testing",
        "SUBMENU": {
          "LI_0": "Predefined test values for all tests (TAN and PIN):",
          "LI_1": "Redirect:",
          "LIST_1": {
            "LI_1": "Payment Initiation Flow",
            "LI_2": "Payment Cancellation Flow",
            "LI_3": "Consent Initiation Flow"
          },
          "LI_2": "Embedded:",
          "LI_3": "Account Information:",
          "LIST_2": {
            "LI_1": "Read Account List",
            "LI_2": "Read Account Details",
            "LI_3": "Read Balance",
            "LI_4": "Read List of Transactions",
            "LI_5": "Read Transaction Details"
          }
        },
        "LI_2": "Postman testing"
      }
    },
    "REDIRECT": {
      "TITLE": "Short overview of REDIRECT approach:",
      "LI_1": "The whole SCA process with two different factors (e.g. username/password\n as proof of knowledge and a one time password (TAN) as proof of\n possession) is provided by the ASPSP and executed directly between PSU and\n ASPSP.",
      "LI_2": "Therefore, the PSU needs to gets redirected from PISP to ASPSP.",
      "LI_3": "The SCA of the PSU is executed directly between the ASPSP and the PSU.",
      "LI_4": "After completion of the SCA the PSU gets redirected back to the PISP."
    },
    "EMBEDDED": {
      "TITLE": "Short overview of EMBEDDED approach:",
      "LI_1": "The whole SCA process with two different factors (e.g. username/password\n as proof of knowledge and a one time password (TAN) as proof of\n possession) is provided by the TPP and executed not directly between PSU\n and ASPSP, but with TPPs calls to XS2A Interface.",
      "LI_2": "TPP uses predefined XS2A endpoints to complete authorisation flow."
    },
    "TESTING": {
      "TEXT_1": "You can use 3 typical testing flows for REDIRECT and EMBEDDED SCA approaches\n with Swagger.",
      "TEXT_2": "To open Swagger page of XS2ASandbox locally start all the services with\n docker command from ",
      "LINK_1": "Getting Started.",
      "TEXT_3": "After starting all the\n services, go to your local",
      "LINK_2": "XS2A Interface Swagger Page",
      "TEXT_4": "To open Swagger page on the cloud follow",
      "LINK_3": "this link."
    },
    "TEST_VALUES": {
      "TEXT_1": "For all the tests in Redirect and Embedded approaches it is required to use\n PIN for logging into the account and TAN number for SCA.",
      "TEXT_2": "Test value for PIN for all automatically generated users:",
      "TEXT_3": "Test value for TAN in all tests:"
    },
    "POSTMAN_TESTING": {
      "TEXT_1": "Postman is an easy testing environment, where you can simply import and run\n prepared tests.",
      "TEXT_2": "Download latest Postman application to use prepared Postman tests",
      "LINK": "here.",
      "TEXT_3": "You can download Postman tests with environmental variables for all the\n endpoints by clicking \"Download\" button below.",
      "DOWNLOAD": "Download",
      "TEXT_4": "After downloading the files, import them into Postman and start testing."
    },
    "COMPONENTS": {
      "TABS": {
        "DOC": "Documentation",
        "PLAY": "Play with data"
      },
      "TH": {
        "TH_1": "Header",
        "TH_2": "Value"
      },
      "CODE_AREA": {
        "SHOW": "Show Body",
        "HIDE": "Hide Body"
      },
      "RDCT_PAY_INIT_POST": {
        "TITLE_1": "STEP 1: Create payment",
        "PART_1": "Open swagger tab \"Payment Initiation Service (PIS)\", open",
        "PART_2": "2. Press ",
        "ITALIC_SPAN": "Try it out",
        "PART_3": ". Choose:",
        "PART_4": "and",
        "PART_5": ". Default values would be",
        "PART_6": "in",
        "PART_7": "and",
        "PART_8": "in ",
        "PART_9": "3. After choosing payment service and payment product, fill the header\n fields with the following values:",
        "PART_10": "Put in ",
        "PART_11": "the name of the\n user you chose (you can view users and their information in TPP-UI).",
        "PART_12": "4. If you chose to create single payment by setting",
        "PART_13": " to",
        "PART_14": ", insert into\n request body the following json:",
        "PART_15": "If you chose to create periodic payment by setting",
        "PART_16": " to",
        "PART_17": ", insert\n into request body the following json:",
        "PART_18": "If you chose to create bulk payment by setting",
        "PART_19": " to",
        "PART_20": ", insert into\n request body the following json:",
        "PART_21": "Change placeholder ",
        "PART_22": " in\n section",
        "PART_23": "of the json you chose to the IBAN of the user (IBAN should match user\n login you entered in PSU-ID header above).",
        "PART_24": "5. Execute and get response with code 201 and related information.",
        "TITLE_2": "STEP 2: Authorise payment",
        "PART_25": "Start with the authorisation process. Follow",
        "PART_26": " link to the\n online banking page."
      },
      "RDCT_PAY_DELETE": {
        "TITLE_1": "STEP 2: Cancel payment",
        "PART_1": "Start with the authorisation process. Follow",
        "PART_2": "link to the online banking page.",
        "PART_3": "1. Initiate cancellation process with",
        "PART_4": "Choose the same",
        "PART_5": "and",
        "PART_6": "you chose in ",
        "STEP": "STEP 1",
        "PART_7": "2. Enter payment id you have got from the previous response in",
        "PART_8": "in the field",
        "PART_9": "3. After choosing payment service and payment product, fill the header\n fields with the following values:",
        "PART_10": "4. Hit ",
        "ITALIC_SPAN": "\"Execute\"",
        "PART_11": "button and get 200\n HTTP code and related information.",
        "TITLE_2": "STEP 3: Authorise payment",
        "PART_12": "1. Start with the authorisation process for cancellation. Follow",
        "PART_13": "link to the online banking page."
      },
      "RDCT_CONS": {
        "TITLE_1": "STEP 1: Create consent",
        "PART_1": "1. Open swagger tab \"Account Information Service (AIS)\", open",
        "PART_2": "2. Press ",
        "ITALIC_SPAN": "\"Try it out\"",
        "PART_3": ", fill the header\n fields with the following values:",
        "PART_4": "Put in ",
        "PART_5": " the name of the\n user you chose (you can view users and their information in TPP-UI).",
        "PART_6": "3. Insert into request body the following json for available accounts\n consent:",
        "STEP": "STEP 1",
        "PART_7": "Change placeholder ",
        "PART_8": " to the\n IBAN of the user (IBAN should match user login you entered in PSU-ID\n header above).",
        "PART_9": "4. Execute and get response with code 201 and related information.",
        "TITLE_2": "STEP 2: Authorise consent",
        "PART_10": "1. Start with the authorisation process for consent: follow the link",
        "PART_11": "to the online\n banking page."
      },
      "EMB_IN_CR_POST": {
        "PART_25": "6. Start with the authorisation process.",
        "PART_26": "Pay attention to the amount of SCA methods user has: if user has no SCA\n methods, test payment initiation with the flow described below in",
        "ITALIC_1": "\"Payment authorisation for user with no SCA methods\"",
        "PART_27": ". For user with single SCA method check",
        "ITALIC_2": "\"Payment authorisation for user with single SCA method\"",
        "PART_28": ", and for user with multiple SCA methods check",
        "ITALIC_3": "\"Payment authorisation for user with multiple SCA methods\""
      },
      "EMB_IN_AUTH_POST": {
        "TITLE": "STEP 2: Authorise payment",
        "PART_1": "1. Start authorisation process with",
        "PART_2": ". Choose the same",
        "PART_3": "and",
        "PART_4": "you chose in ",
        "STEP": "STEP 1",
        "PART_5": "2. Enter payment id you have got from the previous response in",
        "PART_6": "in the field",
        "PART_7": "3. After choosing payment service and payment product, fill the header\n fields with the following values:",
        "PART_8": "Put in ",
        "PART_9": "the name of the\n user you chose (you can view users and their information in TPP-UI).",
        "PART_10": "4. Start authorisation by hitting",
        "ITALIC_SPAN": "\"Execute\"",
        "PART_11": "button and get 201 HTTP code\n and related information."
      },
      "EMB_IN_PUT": {
        "TITLE": "STEP 2: Authorise payment",
        "SUBTITLE_1": "Payment authorisation for user with no SCA methods",
        "PART_1": "5. Continue payment authorisation with call to",
        "PART_2": "6. Enter payment id in the field in the field",
        "PART_3": "and authorisation id you received from POST endpoint (start\n authorisation) in",
        "PART_4": "field.",
        "PART_5": "7. Fill the header fields with the following values:",
        "PART_6": "Put in ",
        "PART_7": " the name of the\n user you chose (you can view users and their information in TPP-UI).",
        "PART_8": "8. Insert into request body the following json:",
        "PART_9": "Put in ",
        "PART_10": " the password of\n the user you chose (you can view users and their information in TPP-UI).",
        "PART_11": "9. Execute endpoint and get",
        "PART_12": "and",
        "PART_13": "in response.",
        "SUBTITLE_2": "Payment authorisation for user with single SCA method",
        "PART_14": "5. Continue payment authorisation with call to",
        "PART_15": "6. Enter payment id in the field in the field",
        "PART_16": "and authorisation id you received from POST endpoint (start\n authorisation) in",
        "PART_17": "field.",
        "PART_18": "7. Fill the header fields with the following values:",
        "PART_19": "Put in ",
        "PART_20": " the name of the\n user you chose (you can view users and their information in TPP-UI).",
        "PART_21": "8. Insert into request body the following json:",
        "PART_22": "Put in ",
        "PART_23": " the password of\n the user you chose (you can view users and their information in TPP-UI).",
        "PART_24": "9. Execute endpoint and get",
        "PART_25": "and",
        "PART_26": "in response.",
        "PART_27": "10. Execute this PUT endpoint again, but this time update request body:\n fill it with the following json:",
        "PART_28": "User has only one SCA method, so test TAN",
        "PART_29": "was sent to the user, and now you need to enter this data and execute\n PUT command. The response should be",
        "PART_30": "and",
        "SUBTITLE_3": "Payment authorisation for user with multiple SCA methods",
        "PART_31": "5. Continue payment authorisation with call to",
        "PART_32": "6. Enter payment id in the field in the field",
        "PART_33": "and authorisation id you received from POST endpoint (start\n authorisation) in",
        "PART_34": "field.",
        "PART_35": "7. Fill the header fields with the following values:",
        "PART_36": "Put in ",
        "PART_37": " the name of the\n user you chose (you can view users and their information in TPP-UI).",
        "PART_38": "8. Insert into request body the following json:",
        "PART_39": "Put in ",
        "PART_40": " the password of\n the user you chose (you can view users and their information in TPP-UI).",
        "PART_41": "9. Execute endpoint and get",
        "PART_42": " and list of\n authorisation methods in response.",
        "PART_43": "10. Execute this PUT endpoint again, but this time update request body:\n fill it with the following json:",
        "PART_44": "Put in placeholder",
        "PART_45": "any\n value of authenticationMethodId of your choice. The response should be",
        "PART_46": " and",
        "PART_47": "11. Execute this PUT endpoint again, update request body: fill it with\n the following json:",
        "PART_48": "SCA method was chosen, so test TAN",
        "PART_49": " was sent to the\n user, and now you need to enter this data and execute PUT command.",
        "PART_50": "The response should be",
        "PART_51": " and"
      },
      "EMB_IN_GET": {
        "PART_1": "1. Try GET endpoint",
        "PART_2": "to get payment information and GET endpoint",
        "PART_3": "to check current status of the payment.",
        "PART_4": "2. Try GET endpoint",
        "PART_5": "to get authorisation information and GET endpoint",
        "PART_6": "to check current status of the authorisation.",
        "SUBTITLE": "Main steps:",
        "PART_7": "1. Choose",
        "PART_8": "and",
        "PART_9": ". Use the same values you used in the steps before.",
        "PART_10": "2. After choosing payment service and payment product, fill the header\n fields with the following values:",
        "PART_11": "Put in ",
        "PART_12": "the name of the\n user you chose (you can view users and their information in TPP-UI)."
      },
      "EMB_CANCEL_POST": {
        "PART_25": "6. Start with the authorisation process. If the payment is not\n authorised yet - authorise payment with the flows above (depending on\n the amount of SCA methods chosen user has).",
        "PART_26": "7. If the payment is already authorised - proceed with payment\n cancellation.",
        "PART_27": "Pay attention to the ASPSP-Profile option",
        "PART_28": "If this option is set to",
        "PART_29": ", then check",
        "BOLD_1": "Payment cancellation without authorisation",
        "PART_30": "flow.",
        "PART_31": "If the option is set to",
        "PART_32": ", pay attention to the amount of SCA methods user has: if user has no\n SCA methods, test payment initiation with the flow described below in",
        "BOLD_2": "Payment cancellation authorisation for user with no SCA methods",
        "PART_33": ". For user with single SCA method check",
        "BOLD_3": "Payment cancellation authorisation for user with single SCA method",
        "PART_34": ", and for user with multiple SCA methods check",
        "BOLD_4": "Payment cancellation authorisation for user with multiple SCA methods"
      },
      "EMB_CANS_DELETE": {
        "TITLE": "STEP 2: Payment cancellation authorisation"
      },
      "EMB_CANS_POST": {
        "TITLE": "STEP 2: Payment cancellation authorisation",
        "PART_1": "4. Start payment cancellation authorisation with",
        "PART_2": ". Choose the same",
        "PART_3": "and",
        "PART_4": "you chose in ",
        "STEP": "STEP 1",
        "PART_5": "5. Enter payment id you have got from the previous response in",
        "PART_6": "in the field",
        "PART_7": "6. Fill the header fields with the following values:",
        "PART_8": "Put in ",
        "PART_9": " the name of the\n user you chose (you can view users and their information in TPP-UI).",
        "PART_10": "7. Execute the command and get 201 response and related information."
      },
      "EMB_CANS_PUT": {
        "TITLE": "STEP 2: Payment cancellation authorisation",
        "SUBTITLE_1": "Payment cancellation authorisation for user with no SCA methods",
        "PART_1": "8. Continue payment cancellation authorisation with call to",
        "PART_2": ". Choose the same",
        "PART_3": "and",
        "PART_4": "you chose in ",
        "STEP": "STEP 1",
        "PART_5": ". Fill headers with\n the same values as in previous POST command.",
        "PART_6": "9. Enter payment id you have got from",
        "PART_7": " in the field",
        "PART_8": ". Enter cancellation id you have got from the previous POST endpoint in\n the field",
        "PART_9": "10. Insert into request body the following json:",
        "PART_10": "Put in ",
        "PART_11": " the password of\n the user you chose (you can view users and their information in TPP-UI).",
        "PART_12": "11. Execute endpoint and get",
        "SUBTITLE_2": "Payment cancellation authorisation for user with single SCA method",
        "PART_13": "8. Continue payment cancellation authorisation with call to",
        "PART_14": ". Choose the same",
        "PART_15": "and",
        "PART_16": "you chose in ",
        "PART_17": ". Fill headers with\n the same values as in previous POST command.",
        "PART_18": "9. Enter payment id you have got from",
        "PART_19": " in the field",
        "PART_20": ". Enter cancellation id you have got from the previous POST endpoint in\n the field",
        "PART_21": "10. Insert into request body the following json:",
        "PART_22": "Put in ",
        "PART_23": " the password of\n the user you chose (you can view users and their information in TPP-UI).",
        "PART_24": "11. Execute endpoint and get",
        "PART_25": "12. Execute this PUT endpoint again, but this time update request body:\n fill it with the following json:",
        "PART_26": "User has only one SCA method, so test TAN",
        "PART_27": "was sent to the user, and now you need to enter this data and execute\n PUT command. The response should be",
        "SUBTITLE_3": "Payment cancellation authorisation for user with multiple SCA methods",
        "PART_28": "8. Continue payment cancellation authorisation with call to",
        "PART_29": ". Choose the same",
        "PART_30": "and",
        "PART_31": "you chose in ",
        "PART_32": ". Fill headers with\n the same values as in previous POST command.",
        "PART_33": "9. Enter payment id you have got from",
        "PART_34": " in the field",
        "PART_35": ". Enter cancellation id you have got from the previous POST endpoint in\n the field",
        "PART_36": "10. Insert into request body the following json:",
        "PART_37": "Put in ",
        "PART_38": " the password of\n the user you chose (you can view users and their information in TPP-UI).",
        "PART_39": "11. Execute endpoint and get",
        "PART_40": "and list of authorisation methods in response.",
        "PART_41": "12. Execute this PUT endpoint again, but this time update request body:\n fill it with the following json:",
        "PART_42": "Put in placeholder",
        "PART_43": " any value\n of authenticationMethodId of your choice. The response should be",
        "PART_44": "13. Execute this PUT endpoint again, update request body: fill it with\n the following json:",
        "PART_45": "User has only one SCA method, so test TAN",
        "PART_46": "was sent to the user, and now you need to enter this data and execute\n PUT command. The response should be"
      },
      "EMB_CANS_GET": {
        "PART_1": "12. Try GET endpoint",
        "PART_2": "to check current status of the cancellation authorisation.",
        "PART_3": "13. Try GET endpoint",
        "PART_4": "to get current payment status (it should be `CANC`, cancelled)."
      },
      "EMB_CONS_AUTH": {
        "TITLE": "STEP 2: Consent authorisation",
        "PART_1": "1. Start authorisation process with",
        "PART_2": "2. Enter consent id you have got from the previous response in",
        "STEP": "STEP 1",
        "PART_3": " in the field",
        "PART_4": "3. After providing consent id, fill the header fields with the following\n values:",
        "PART_5": "Put in ",
        "PART_6": " the name of the\n user you chose (you can view users and their information in TPP-UI).",
        "PART_7": "4. Start authorisation by hitting",
        "ITALIC": "\"Execute\"",
        "PART_8": " button and get 201 HTTP code\n and related information."
      },
      "EMB_CONS_PUT": {
        "TITLE": "STEP 2: Consent authorisation",
        "SUBTITLE_1": "Consent authorisation for user with no SCA methods",
        "PART_1": "4. Start authorisation by hitting",
        "ITALIC": "\"Execute\"",
        "PART_2": "button and get 201 HTTP code\n and related information.",
        "PART_3": "5. Continue payment authorisation with call to",
        "PART_4": "6. Enter consent id in the field",
        "PART_5": "and authorisation id you received from POST endpoint (start\n authorisation) in",
        "PART_6": "field.",
        "PART_7": "7. Fill the header fields with the following values:",
        "PART_8": "8. Insert into request body the following json:",
        "PART_9": "Put in ",
        "PART_10": " the password of\n the user you chose (you can view users and their information in TPP-UI).",
        "PART_11": "9. Execute endpoint and get",
        "PART_12": "and",
        "PART_13": "in response.",
        "SUBTITLE_2": "Consent authorisation for user with single SCA method",
        "PART_14": "5. Continue payment authorisation with call to",
        "PART_15": "6. Enter consent id in the field",
        "PART_16": "and authorisation id you received from POST endpoint (start\n authorisation) in",
        "PART_17": "field.",
        "PART_18": "7. Fill the header fields with the following values:",
        "PART_19": "Put in ",
        "PART_20": " the name of the\n user you chose (you can view users and their information in TPP-UI).",
        "PART_21": "8. Insert into request body the following json:",
        "PART_22": "Put in ",
        "PART_23": " the password of\n the user you chose (you can view users and their information in TPP-UI).",
        "PART_24": "9. Execute endpoint and get",
        "PART_25": "and",
        "PART_26": "in response.",
        "PART_27": "10. Execute this PUT endpoint again, but this time update request body:\n fill it with the following json:",
        "PART_28": "User has only one SCA method, so test TAN",
        "PART_29": "was sent to the user, and now you need to enter this data and execute\n PUT command.",
        "PART_30": "The response should be",
        "PART_31": "and",
        "SUBTITLE_3": "Consent authorisation for user with multiple SCA methods",
        "PART_32": "5. Continue payment authorisation with call to",
        "PART_33": "6. Enter consent id in the field",
        "PART_34": "and authorisation id you received from POST endpoint (start\n authorisation) in",
        "PART_35": "field.",
        "PART_36": "7. Fill the header fields with the following values:",
        "PART_37": "8. Insert into request body the following json:",
        "PART_38": "Put in ",
        "PART_39": " the password of\n the user you chose (you can view users and their information in TPP-UI).",
        "PART_40": "9. Execute endpoint and get",
        "PART_41": "and list of authorisation methods in response.",
        "PART_42": "10. Execute this PUT endpoint again, but this time update request body:\n fill it with the following json:",
        "PART_43": "Put in placeholder",
        "PART_44": " any value\n of authenticationMethodId of your choice. The response should be",
        "PART_45": "and",
        "PART_46": "11. Execute this PUT endpoint again, update request body: fill it with\n the following json:",
        "PART_47": "SCA method was chosen, so test TAN",
        "PART_48": "was sent to the user, and now you need to enter this data and execute\n PUT command.",
        "PART_49": "The response should be",
        "PART_50": "and"
      },
      "EMB_CONS_GET": {
        "PART_1": "1. Try GET endpoint",
        "PART_2": "to get consent information and GET endpoint",
        "PART_3": "to check current status of the consent.",
        "PART_4": "2. Try GET endpoint",
        "PART_5": "to get authorisation information and GET endpoint",
        "PART_6": "to check current status of the authorisation."
      },
      "AC_INF_ACS": {
        "PART_1": "1. Try GET endpoint",
        "PART_2": "to get account with chosen consent-id",
        "PART_3": "Put in ",
        "PART_4": " the consent-id of accounts\n that you want to get(you can view users and their information in TPP-UI)."
      },
      "AC_INF_AC": {
        "PART_1": "1. Try GET endpoint",
        "PART_2": "to get account with chosen account-id",
        "PART_3": "Put in ",
        "PART_4": " the consent-id of account\n that you want to get(you can view users and their information in TPP-UI)."
      },
      "AC_INF_BAL": {
        "PART_1": "1. Try GET endpoint",
        "PART_2": "to get account's list of balances",
        "PART_3": "Put in ",
        "PART_4": " the consent-id of account\n that you want to get(you can view users and their information in TPP-UI)."
      },
      "AC_INF_TRS": {
        "PART_1": "1. Try GET endpoint",
        "PART_2": "to get account's list of transactions with chosen booking status.",
        "PART_3": "Put in ",
        "PART_4": " the consent-id of account\n that you want to get(you can view users and their information in TPP-UI)."
      },
      "AC_INF_TR": {
        "PART_1": "1. Try GET endpoint",
        "PART_2": "to get account's transaction with current id.",
        "PART_3": "Put in ",
        "PART_4": " the consent-id of account\n that you want to get(you can view users and their information in TPP-UI)."
      }
    }
  },
  "FAQ": {
    "TITLE": "P+F(preguntas mas frequentes)",
    "CONSENTS": {
      "TITLE": "Consentimientos",
      "SUBTITLE_1": "¿Por qué no puedo crear un consentimiento?",
      "PART_1": "La función dentro del Certificado QWAC no contiene la función AIS. En este caso debería recibir un error similar:",
      "PART_2": "Solución: cree un nuevo certificado que contenga la función AIS e inserte este certificado en su solicitud o decodifique su certificado y verifique la qcStatement que debe contener “PSP_AI\".",
      "PART_3": "Otra posibilidad es que el atributo \"recurringIndicator\" dentro de su solicitud esté configurado en \"false\", mientras que el atributo \"frequencyPerDay\" no es igual a \"1\". De forma predeterminada, el \"recurringIndicator\" debe ser \"true\", ya que un TPP desea acceder a los datos de la cuenta en el período de tiempo indicado. Sin embargo, cuando el TPP solo quiere mostrar una lista de posibles cuentas para la PSU, basta con un acceso único. En este caso debería recibir el siguiente error:",
      "PART_4": "Solución: Si desea acceder a los datos de la cuenta con este consentimiento solo una vez, cambie el valor de \"frequencyPerDay\" a \"1\". De lo contrario, asigne \"true\" al “\"recurringIndicator\".",
      "SUBTITLE_2": "¿Por qué no puedo acceder a los datos de mi cuenta?",
      "PART_5": "Es posible que el consentimiento emitido no permita esta operación. Un AIS-Consent define tres niveles de acceso. El primer nivel permite el acceso a \"accounts\", el segundo a \"balances\" y el tercero a “transactions\". Hay algunas posibles combinaciones y una selección de \"balances\" o \"transactions\" también otorga acceso a \"accounts\". Un consentimiento que otorga acceso a las cuentas y transacciones no permite llamar al punto final de saldo.",
      "PART_6": "En este caso debería recibir el siguiente error:",
      "TODO": "TODO",
      "PART_7": "Solución: solicite a la PSU que cree un nuevo consentimiento que le permita acceder a los puntos finales apropiados.",
      "PART_8": "Otra razón podría ser que el estado de consentimiento no es válido. Un estado será, por ejemplo, expira automáticamente cuando se excede la \"expirationDate\" definida en el consentimiento. También podría ser posible que se haya producido un error al realizar SCA. Para obtener información más detallada, consulte las P+F sobre autenticación fuerte de clientes(Strong Customer Authentication)"
    },
    "STRONG": {
      "TITLE": "Strong Customer Authentication (Autenticación de cliente fuerte)",
      "SUBTITLE_1": "¿Cómo puedo cambiar el estado de la transacción / consentimiento?",
      "PART_1": "Por defecto, una nueva transacción / consentimiento creado tiene el estado",
      "RECEIVED": "\"received\"",
      "PART_2": ". Para realizar SCA utilizando el enfoque REDIRECT, el sandbox proporciona un Redirect Server donde el estado se actualiza según la PSU. Como SCA para REDIRECT está simplificado para este entorno limitado, es suficiente pasar un PSU-ID a través de Query-Parameter para simular todo el SCA. A continuación se proporciona un ejemplo:",
      "PART_3": "El Query Parameter psu-id es obligatorio. Si no se proporciona, el servidor de redirección mostrará un mensaje de error predeterminado.",
      "SUBTITLE_2": "¿Por qué no puedo cambiar el estado de la transacción / consentimiento con una PSU específica?",
      "PART_4": "Si el estado de la transacción / consentimiento es “recieved\", es posible que el PSU-ID no coincida con el IBAN en el inicio de pago o la solicitud de creación de consentimiento. La asignación entre PSU-ID y IBAN (s) se documenta en el portal del desarrollador. Si el estado no cambia a pesar de que se realizó SCA y el IBAN coincide con la ID de la PSU, verifique la ID de la PSU para detectar errores tipográficos y la sensibilidad de las mayúsculas y minúsculas."
    },
    "CERTIFICATES": {
      "TITLE": "Certificados",
      "SUBTITLE_1": "\n¿Cómo puedo crear un certificado válido?",
      "PART_1": "Para acceder a la XS2A API, un TPP debe tener un Qualified Website Authentication Certificate  (QWAC, por sus siglas en inglés) válido que generalmente es emitido por un registrado Trust Service Provider.\nPara el uso de este sandbox, puede emitir certificados de prueba aquí:",
      "PART_2": ". Obtendrá un certificado autofirmado",
      "PART_3": "y una clave privada correspondiente",
      "PART_4": "incrustadas en un archivo",
      "PART_5": "",
      "SUBTITLE_2": "¿Cómo puedo incrustar un certificado en una solicitud?",
      "PART_6": "Después de recibir un QWAC, debe integrarlo a su solicitud. Hay muchas herramientas para realizar llamadas REST. Explicamos la configuración con dos de los más comunes: cURL y Postman. cURL: agregue el archivo",
      "PART_7": " usando",
      "PART_8": "y la clave privada usando",
      "PART_9": ". Tenga en cuenta que es posible que deba adaptar la ruta relativa a sus archivos. Postman: vaya a",
      "PART_10": "y configure la URL del host (en nuestros ejemplos, esto sería",
      "PART_11": "). Tenga en cuenta que ",
      "PART_12": " así como el puerto 443 ya están configurados. Luego agrega tu archivo",
      "PART_13": " y",
      "PART_14": " La frase de contraseña debe dejarse vacía.",
      "SUBTITLE_3": "¿Por qué mi certificado QWAC no funciona?",
      "PART_15": "Es posible que las solicitudes aún no funcionen aunque se agregue un certificado. Esto sucede cuando los certificados expiran. Cada certificado tiene un atributo \"validUntil\" con la fecha de vencimiento. En este caso debería recibir el siguiente error:",
      "PART_16": "Necesita la PSU para crear un nuevo consentimiento y utilizar el nuevo ID de consentimiento. Otra posibilidad es que el certificado no contenga la función que necesita para su solicitud. P.ej. tener el rol \"PIS\" no le permite crear consentimientos. En tal caso, debería recibir el siguiente error:"
    }
  },
  "CONTACT": {
    "TITLE_1": "Tienes algunas preguntas?",
    "SUBTITLE": "Pregunta a este hombre",
    "TITLE_2": "Contactos"
  }
}
